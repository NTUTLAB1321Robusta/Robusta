# SettingPage
ignore.checked.description = Do nothing when catching the exception
dummy.handler.description = Only print or log exception information when catching the exception
nested.try.statement.description = Try block in try block
unprotected.main.program.description = Main program doesn't catch the uppermost exception
careless.cleanup.description = Release the resources not in finally block
over.logging.description = Duplicate logging in one call chain
check.all.smell = Check All Smell
detect.smell.type = Detect EH Smell Type:
description = Description
detail = Detail
show.smell.code = Show EH Smell Code

# multi-page
detect.rule = Detect rules:
customize.rule = Define extra rules:
extra.rule = Open
detect.log4j = Detect using org.apache.log4j
detect.logger = Detect using java.util.logging.Logger
detect.example = Example:

# OverLoggingPage
cast.exception = Keep tracing after casting excpetion
call.chain.example = Call Chain Example:

# DummyHandlerPage
print.stack.trace = e.printStackTrace();
system.out.print = System.out.print();

# CarelessCleanupPage
detect.release.resource.in.method = Release the resource whether the code in the method

# Dialog
edit.rules.dialog.title = Edit Rules Dialog
extra.rules.dialog.title = Extra Rules Dialog
lib.exist = Library is already exist
rule.exist = Rule is already exist
empty = not empty
add = Add
remove = Remove
edit = Edit
select.all = Select All
deselect.all = Deselect All
help = Help
help.description = 	1.Detect Class: Class name + .*\n \
		\  (eg. 'java.lang.String.*' -> detect all in using class of java.lang.String)\n \
		2.Detect Statement: *. + Statement name\n \
		\  (eg. '*.toString' -> detect including statements of toString)\n \
		3.Detect Method: Class name + . + Statement name\n \
		\  (eg. 'java.lang.String.toString' -> detect library of java.lang.String and include statement of toString)

# PreferencePage
filter.description = Please enter RL call chain package to filter string:
filter.text = Tag Call Hierarchy Package Filter:

# multi
smell.type = EH Smell Type
caption = Caption

# EHSmellView
LOC = L.O.C

# EHSmellReportView
browser.default = There is no report now !
filter = Filter
open.report = Open Report
generate = Generate
refresh = Refresh

# FilterDialog
filter.title = EH Smell Filter
detect.all = Detect All Project
detect.select.package = Detect Select Package
filter.rule = Filter Rule
filter.exist = Filter Rule is already exist
help.package.description = 1.Package \n \
						   \  (eg. 'sample.test' -> Only detect specific package name\n \
						   \2.Package + .* \n \
						   \  (eg. 'sample.*' -> detect any beginning of sample's package\n \
						   \  如: 'sample.test' 、 'sample.test.example'... ) \n\n
						   \3.[Folder] + Package \n \
						   \  (eg. '[src]sample' -> Detect 'sample' package that 'src' folder contains. \n\n \
						   \4.[Folder] + Package + .* \n \
						   \  (eg. '[src]sample.*' -> Detect all packages in 'sample' that 'src' folder contains.

# SelectReportDialog
report.list = Report List
project.name = Project Name:
time = Time
delete = Delete

# RLMethodView
level = Level
ex.type = Exception Type
remark = Remark
method.name = Method Name
error.ex.type = Unknown exception type !
update.message = <-- Has been modified, please update
display.all = Display all exceptions
display.all.in.method = Display all exceptions in the method
display.rl = Display RL exception
display.rl.in.method = Display RL exceptions of invoking method on the method
display.undealt.ex = Display unhandled exceptions
display.undealt.ex.in.catch = Display unhandled exceptions(in catch) in method, it will spread to caller
display.deal.ex =Display handled exceptions
display.deal.ex.in.catch = Display handled exceptions(in catch) in method
skip.to.line.number = Skip to line number
select.item.skip.to.line.number = Click item in the table could skip to line number
add.tag.on.method = Add annotation on the method
add.tag = Add @Tag Annotation
remove.tag = Remove @Tag Annotation
update.tag = Update @Tag Annotation
up = Move up
down = Move down

# CallersView
call.chain = Call Chain
tag = @Tag{Level,Exception}
ex = Exception
only.one.path = Only select one path !

# RLBuilder
ex.smell.type = EH Smell Type:[
ex.smell.type.undealt = ]undealt!!!
tag.undefine1 = *exception[
tag.undefine2 = ] undefine @Tag !
error.smell.name = Error EH Smell Name !
null.smell.name = Null EH Smell Name !
tag.level1 = @Tag(level=
tag.level2 =  , exception=
tag.level3 = ) level !
tag.level4 = ) duplicate!
tag.level5 = ) 為 @Tag(level=
tag.level6 = )之父類別(子類別順序應在前) !

# RLQuickFixer
err.rl.level = change to level=
err.no.rl = Add @Tag (level=
err.rl.duplicate = 移除首次出現之@Tag (
err.rl.instance = @RL順序對調(
err.ss.no.smell = Add Smell Type:
err.ss.fault.name1 = Modify
err.ss.fault.name2 = 為
add.suppress.smell = Add @SuppressSmell '

# CSPropertyPage
setting.page = Setting Page
dummy.handler = Dummy Handler
over.logging = OverLogging
careless.cleanup = Careless CleanUp
# ResourceBundle resource = ResourceBundle.getBundle("robusta", new Locale("en", "US"));