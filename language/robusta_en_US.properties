# SettingPage
## Description
empty.catch.description = Leave blank catch block in catch clause.
dummy.handler.description = Only print or log exception information when catch the exception.
nested.try.statement.description = Any try statement contains one or more try statements.
unprotected.main.program.description = The uppermost exception is not catched in main program.
careless.cleanup.description = Any released resource isn't in finally block.
over.logging.description = The same exception is logged many times in a call chain.
overwritten.lead.description = Throwing exception in finally block will cover lead exception.

## Check box
check.all.smell = Check All Code Smells
## Description
settingPage.smell.type = Detecting Code Smell Type
settingPage.smell.description = Description
settingPage.codeExample = Example Code
settingPage.codeExample.highlight = Highlight Code Smell
settingPage.preference = Preferences
settingPage.remindRLAnnotation = Remind me to add RL annotations.

# User Defined Page - multiple used
detect.rule = Detecting rules:
customize.rule = User defined extra rules:
##button
extra.rule = Open
##check box
detect.log4j = Detecting org.apache.log4j
detect.logger = Detecting java.util.logging.Logger
detect.example = Example:

# OverLoggingPage
cast.exception = Trace the exception even though it's casted.
call.chain.example = Call Chain Example:

# DummyHandlerPage
print.stack.trace = e.printStackTrace();
system.out.print = System.out.print();

# CarelessCleanupPage
detect.release.resource.in.method = Also detecting the method invocation which contains released resource code.

# Dialog
edit.rules.dialog.title = Detecting Rules Edidting Dialog
extra.rules.dialog.title = Extra Detecting Rules Editing Dialog
lib.exist = Library is already existed.
rule.exist = Rule is already existed.
empty = Rule should not be empty.
add = Add
remove = Remove
edit = Edit
select.all = Select All
deselect.all = Deselect All
help = Help
help.description = 	1.Detection in Class: Class name + .*\n \
		\  (eg. 'java.lang.String.*' -> detect all classes using java.lang.String)\n \
		2.Detection in Statement: *. + Statement name\n \
		\  (eg. '*.toString' -> detect statements which method name is toString)\n \
		3.Detection in Full Quilified Method Name: Full Qulified Class name + . + Method name\n \
		\  (eg. 'java.lang.String.toString' -> Only detect the method toString in class java.lang.String)

# PreferencePage (will not be released in 2012 Nov)
filter.description = Please enter the package name of Robustness Level call hierarchy(Use comma to separate):
filter.text = Robustness Level Call Hierarchy Package Filter:

# multi (EH Smell View)(will not be released in 2012 Nov)
smell.type = Exception Handling Code Smell Type
caption = Help

# EHSmellView
LOC = L.O.C

# EH Smell Report View - ntut.csie.csdet.report.ui.EHSmellReportView
SmellReport.browser.default = There is no report now !
SmellReport.filter = Filter
SmellReport.open.report = Open Report
SmellReport.generate = Generate
SmellReport.refresh = Refresh
SmellReport.generateReportProgressBarTitle = Generate Exception Handling Code Smell Report

# EH Smell Report View FilterDialog
filter.title = Exception Handling Code Smell Filter
detect.all = Detect All Packages
detect.select.package = Detect Selected Packages
filter.rule = Filter Rules
filter.exist = Filter Rule is already existed
help.package.description = 1.Package \n \
						   \  (eg. 'sample.test' -> Only detect specific package name.)\n \
						   \2.Package + .* \n \
						   \  (eg. 'sample.*' -> Detect any package name start with sample, \n \
						   \  such as 'sample.test', 'sample.test.example', and so on. ) \n\n
						   \3.[Folder] + Package \n \
						   \  (eg. '[src]sample' -> Only detect 'sample' package which is in 'src' folder. \n\n \
						   \4.[Folder] + Package + .* \n \
						   \  (eg. '[src]sample.*' -> Detect all packages below 'sample' in 'src' folder.

# SelectReportDialog
report.list = Report List
project.name = Project Name:
time = Time
delete = Delete

# RLMethodView (will not be released in 2012 Nov)
level = Level
ex.type = Exception Type
remark = Remark
method.name = Method Name
error.ex.type = Unknown exception type !
update.message = <-- Has been modified, please update
display.all = Display all exceptions
display.all.in.method = Display all exceptions in the method
display.rl = Display RL exception
display.rl.in.method = Display RL exceptions of invoking method on the method
display.undealt.ex = Display unhandled exceptions
display.undealt.ex.in.catch = Display unhandled exceptions(in catch) in method, it will spread to caller
display.deal.ex =Display handled exceptions
display.deal.ex.in.catch = Display handled exceptions(in catch) in method
skip.to.line.number = Skip to line number
select.item.skip.to.line.number = Click item in the table could skip to line number
add.tag.on.method = Add annotation on the method
add.tag = Add @RTag Annotation
remove.tag = Remove @RTag Annotation
update.tag = Update @RTag Annotation
up = Move up
down = Move down

# CallersView (will not be released in 2012 Nov)
call.chain = Call Chain
tag = @RTag{Level,Exception}
ex = Exception
only.one.path = Only select one path !

# RLBuilder
ex.smell.type.undealt = Exist Code Smell:[
ex.smell.type = ]!!!
tag.undefine1 = *Should define the Robustness annotation of [
tag.undefine2 = ]
error.smell.name = Error! Code Smell Name doesn't exist.
null.smell.name = Code Smell Name doesn't exist!
tag.level1 = @RTag(level=
tag.level2 =  , exception=
tag.level3 = ) the value of level is invalid!
tag.level4 = ) is duplicated!
tag.level5 = ) is the super class of @RTag(level=
tag.level6 = )(subclass should be first order)!

# RLQuickFixer
err.rl.level = change to level=
err.no.rl = Add @RTag (level=
err.rl.duplicate = Remove the duplicated @RTag (
err.rl.instance = Exchange the order of @RTag(
err.ss.no.smell = Add Code Smell Type:
err.ss.fault.name1 = Modify
err.ss.fault.name2 = to
add.suppress.smell = Add @SuppressSmell '
add.suppress.smell.on.method = ' on Method
add.suppress.smell.on.catch = ' on Catch

# CSPropertyPage
setting.page = Setting Page
dummy.handler = Dummy Handler
over.logging = Over Logging
careless.cleanup = Careless Cleanup
# ResourceBundle resource = ResourceBundle.getBundle("robusta", new Locale("en", "US"));