# SettingPage
ignore.checked.description = 捕捉到例外後，Catch Block沒有做任何處理
dummy.handler.description = 捕捉到例外後，僅只是將例外資訊列印或紀錄下來
nested.try.statement.description = Try Block中出巢狀區塊
unprotected.main.program.description = Main Program中沒有補捉最上層的例外
careless.cleanup.description = 釋放資源的程式不是放在Finally Blcok
over.logging.description = 一條Call Chain中出現重複的Logging動作
check.all.smell = Check All Smell
detect.smell.type = Detect EH Smell Type:
description = Description
detail = Detail
show.smell.code = Show EH Smell Code

# multi-page
detect.rule = 偵測條件：
customize.rule = 自行定義偵測條件:
extra.rule = 開啟
detect.log4j = Detect using org.apache.log4j
detect.logger = Detect using java.util.logging.Logger
detect.example = 偵測範例:

# OverLoggingPage
cast.exception = Excpetion轉型後繼續偵測
call.chain.example = Call Chain Example:

# DummyHandlerPage
print.stack.trace = e.printStackTrace();
system.out.print = System.out.print();

# CarelessCleanupPage
detect.release.resource.in.method = 另外偵測釋放資源的程式碼是否在函式中

# Dialog
edit.rules.dialog.title = Edit Rules Dialog
extra.rules.dialog.title = Extra Rules Dialog
lib.exist = Library is already exist
rule.exist = Rule is already exist
empty = not empty
add = Add
remove = Remove
edit = Edit
select.all = Select All
deselect.all = Deselect All
help = Help
help.description = 	1.偵測Class: Class名稱 + .*\n \
		\  (eg. 'java.lang.String.*' -> 偵測所有使用到java.lang.String的Class)\n \
		2.偵測Statement: *. + Statement名稱\n \
		\  (eg. '*.toString' -> 偵測任意包含toString的Statement)\n \
		3.偵測方法: Class名稱 + . + Statement名稱\n \
		\  (eg. 'java.lang.String.toString' -> 偵測有使用java.lang.String的Library且有包含toString的Statement)

# PreferencePage
filter.description = 請輸入RL呼叫階層Package過濾字串(請用,分隔)：
filter.text = Tag Call Hierarchy Package Filter:

# multi
smell.type = EH Smell Type
caption = 說明

# EHSmellView
LOC = 行數

# EHSmellReportView
browser.default = There is no report now !
filter = Filter
open.report = Open Report
generate = Generate
refresh = Refresh

# FilterDialog
filter.title = EH Smell Filter
detect.all = Detect All Project
detect.select.package = Detect Select Package
filter.rule = Filter Rule
filter.exist = Filter Rule已存在
help.package.description = 1.Package \n \
						   \  (eg. 'sample.test' -> 只偵測特定Package名稱的Package)\n \
						   \2.Package + .* \n \
						   \  (eg. 'sample.*' -> 偵測任意開頭有sample的Package \n \
						   \  如: 'sample.test' 、 'sample.test.example'... ) \n\n
						   \3.[Folder] + Package \n \
						   \  (eg. '[src]sample' -> Detect 'sample' package that 'src' folder contains. \n\n \
						   \4.[Folder] + Package + .* \n \
						   \  (eg. '[src]sample.*' -> Detect all packages in 'sample' that 'src' folder contains.

# SelectReportDialog
report.list = Report List
project.name = Project Name:
time = Time
delete = Delete

# RLMethodView
level = 等級
ex.type = 例外類型
remark = 備註
method.name = 方法名稱
error.ex.type = 無法識別的例外類別！
update.message = <--已修改，請更新
display.all = 顯示所有例外
display.all.in.method = 顯示方法內所有的例外
display.rl = 顯示強健度等級例外
display.rl.in.method = 顯示方法內呼叫物件方法之定義強健度等級的例外
display.undealt.ex = 顯示未處理例外
display.undealt.ex.in.catch = 顯示方法內未被處理(Catch)的例外，會傳播至呼叫者
display.deal.ex = 顯示已處理例外
display.deal.ex.in.catch = 顯示方法內已經處理(Catch)的例外
skip.to.line.number = 跳至該行源碼
select.item.skip.to.line.number = 點選表格例外項目可跳至該行源碼
add.tag.on.method = 加到方法之@Tag Annotation上
add.tag = 增加 @Tag Annotation
remove.tag = 移除 @Tag Annotation
update.tag = 更新 @Tag Annotation
up = 向上移一筆
down = 向下移一筆

# CallersView
call.chain = 呼叫階層
tag = @Tag{Level,Exception}
ex = 例外
only.one.path = 一次只能選擇一條路徑！！

# RLBuilder
ex.smell.type = EH Smell Type:[
ex.smell.type.undealt = ]未處理!!!
tag.undefine1 = *例外[
tag.undefine2 = ] 未定義@Tag！
error.smell.name = Error EH Smell Name!
null.smell.name = Null EH Smell Name!
tag.level1 = @Tag(level=
tag.level2 =  , exception=
tag.level3 = ) level值錯誤！
tag.level4 = ) 重覆！
tag.level5 = ) 為 @Tag(level=
tag.level6 = )之父類別(子類別順序應在前)！

# RLQuickFixer
err.rl.level = 變更成level=
err.no.rl = 新增@Tag (level=
err.rl.duplicate = 移除首次出現之@Tag (
err.rl.instance = @RL順序對調(
err.ss.no.smell = 新增 Smell Type:
err.ss.fault.name1 = 修改
err.ss.fault.name2 = 為
add.suppress.smell = 新增 @SuppressSmell '

# CSPropertyPage
setting.page = Setting Page
dummy.handler = Dummy Handler
over.logging = OverLogging
careless.cleanup = Careless CleanUp
# ResourceBundle resource = ResourceBundle.getBundle("robusta", new Locale("en", "US"));