# SettingPage
## Description
empty.catch.description = Catch Clause僅捕捉例外，但留下空白的Catch Block。
dummy.handler.description = Catch Clause捕捉到例外後，僅將例外資訊列印或紀錄下來。
nested.try.statement.description = 巢狀的try statement結構。
unprotected.main.program.description = Main Program中沒有補捉最上層的例外
careless.cleanup.description = 釋放資源的程式碼，可能因為被例外中止而不被執行
over.logging.description = 相同的例外在同一條Call Chain中重複被記錄
thrown.exception.in.finally.block.description = 在finally block中，有已知的例外會被拋出

## Check box
check.all.smell = 勾選所有壞味道
## Description
detect.smell.type = 偵測的壞味道類別:
description = 描述
detail = 詳細資訊
show.smell.code = 醒目標示壞味道程式碼

# User Defined Page - multiple used
detect.rule = 偵測條件：
customize.rule = 使用者額外定義偵測條件:
##button
extra.rule = 開啟
##check box
detect.log4j = 偵測 org.apache.log4j
detect.logger = 偵測 java.util.logging.Logger
detect.example = 範例:

# OverLoggingPage
cast.exception = 被轉型的例外也當作相同的例外來偵測
call.chain.example = Call Chain 範例:

# DummyHandlerPage
print.stack.trace = e.printStackTrace();
system.out.print = System.out.print();

# CarelessCleanupPage
detect.release.resource.in.method = 一併偵測method invocation是否包含釋放資源的程式碼

# Dialog
edit.rules.dialog.title = 偵測條件編輯視窗
extra.rules.dialog.title = 額外偵測條件編輯視窗
lib.exist = Library 已存在
rule.exist = 偵測條件已存在
empty = 偵測條件不可空白
add = 新增
remove = 移除
edit = 編輯
select.all = 全選
deselect.all = 全不選
help = 提示
help.description = 	1.偵測Class: Class名稱 + .*\n \
		\  (eg. 'java.lang.String.*' -> 偵測所有使用到java.lang.String的Class)\n \
		2.偵測Statement: *. + Statement名稱\n \
		\  (eg. '*.toString' -> 偵測任意包含toString的Statement)\n \
		3.偵測方法: Class名稱 + . + Statement名稱\n \
		\  (eg. 'java.lang.String.toString' -> 偵測有使用java.lang.String的Library且有包含toString的Statement)

# PreferencePage (will not be released in 2012 Nov)
filter.description = 請輸入RL呼叫階層Package過濾字串(請用,分隔)：
filter.text = RL Call Hierarchy Package Filter:

# multi (EH Smell View)(will not be released in 2012 Nov)
smell.type = 例外處理壞味道類型
caption = 說明

# EHSmellView
LOC = 行數

# EH Smell Report View
SmellReport.browser.default = 目前沒有任何報表
SmellReport.filter = 過濾條件
SmellReport.open.report = 開啟報表
SmellReport.generate = 產生報表
SmellReport.refresh = 重新整理
SmellReport.generateReportProgressBarTitle = 產生例外處理壞味道報表

# EH Smell Report View FilterDialog
filter.title = 例外處理壞味道過濾條件
detect.all = 偵測所有Package
detect.select.package = 偵測選擇的Package
filter.rule = 偵測條件
filter.exist = 偵測條件已存在
help.package.description = 1.Package \n \
						   \  (eg. 'sample.test' -> 只偵測特定Package名稱的Package)\n \
						   \2.Package + .* \n \
						   \  (eg. 'sample.*' -> 偵測任意開頭有sample的Package \n \
						   \  如: 'sample.test' 、 'sample.test.example'... ) \n\n
						   \3.[Folder] + Package \n \
						   \  (eg. '[src]sample' -> Detect 'sample' package that 'src' folder contains. \n\n \
						   \4.[Folder] + Package + .* \n \
						   \  (eg. '[src]sample.*' -> Detect all packages in 'sample' that 'src' folder contains.

# SelectReportDialog
report.list = 報表清單
project.name = 專案名稱:
time = Time
delete = Delete

# RLMethodView (will not be released in 2012 Nov)
level = 等級
ex.type = 例外類型
remark = 備註
method.name = 方法名稱
error.ex.type = 無法識別的例外類別！
update.message = <--已修改，請更新
display.all = 顯示所有例外
display.all.in.method = 顯示方法內所有的例外
display.rl = 顯示強健度等級例外
display.rl.in.method = 顯示方法內呼叫物件方法之定義強健度等級的例外
display.undealt.ex = 顯示未處理例外
display.undealt.ex.in.catch = 顯示方法內未被處理(Catch)的例外，會傳播至呼叫者
display.deal.ex = 顯示已處理例外
display.deal.ex.in.catch = 顯示方法內已經處理(Catch)的例外
skip.to.line.number = 跳至該行源碼
select.item.skip.to.line.number = 點選表格例外項目可跳至該行源碼
add.tag.on.method = 加到方法之@RTag Annotation上
add.tag = 增加 @RTag Annotation
remove.tag = 移除 @RTag Annotation
update.tag = 更新 @RTag Annotation
up = 向上移一筆
down = 向下移一筆

# CallersView (will not be released in 2012 Nov)
call.chain = 呼叫階層
tag = @RTag{Level,Exception}
ex = 例外
only.one.path = 一次只能選擇一條路徑！！

# RLBuilder
ex.smell.type.undealt = 類外處理壞味道:[
ex.smell.type = ]未處理!!!
tag.undefine1 = *例外[
tag.undefine2 = ] 未定義強健度等級註記！
error.smell.name = 錯誤! 例外處理壞味道名稱不存在
null.smell.name = 沒有例外處理壞味道!
tag.level1 = @RTag(level=
tag.level2 =  , exception=
tag.level3 = ) level數值無效！
tag.level4 = ) 重覆！
tag.level5 = ) 為 @RTag(level=
tag.level6 = )之父類別(子類別順序應在前)！

# RLQuickFixer
err.rl.level = 變更成level=
err.no.rl = 新增@RTag (level=
err.rl.duplicate = 移除重複出現之@RTag (
err.rl.instance = @RTag順序對調(
err.ss.no.smell = 新增 Code Smell Type:
err.ss.fault.name1 = 修改
err.ss.fault.name2 = 為
add.suppress.smell = 新增 @SuppressSmell '
add.suppress.smell.on.method = ' 在 Method 上
add.suppress.smell.on.catch = ' 在 Catch Clause

# CSPropertyPage
setting.page = 設定主頁
dummy.handler = Dummy Handler
over.logging = Over Logging
careless.cleanup = Careless Cleanup
# ResourceBundle resource = ResourceBundle.getBundle("robusta", new Locale("en", "US"));