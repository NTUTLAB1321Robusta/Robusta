<?xml version="1.0" encoding="UTF-8"?>
<!--****************************************************************************
 * Build Robusta for CI & Wrap for Eclipse Update Site
 ****************************************************************************-->
<project name="Robusta" default="all">
	<property environment="env"/>
	<fail unless="env.ECLIPSE_HOME" message="ECLIPSE_HOME not set."/>
	<property name="ECLIPSE_HOME" value="${env.ECLIPSE_HOME}"/>
	<fail unless="env.ECLIPSE_TEST_TARGET" message="ECLIPSE_TEST_TARGET not set."/>
	<property name="ECLIPSE_TEST_TARGET" value="${env.ECLIPSE_TEST_TARGET}"/>
	<property name="debuglevel" value="source,lines,vars"/>
	<property name="target" value="1.7"/>
	<property name="source" value="1.7"/>
	
	<!-- TASK DEFINING -->
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpath="external_lib/ant_lib/xmltask.jar"/>
	
	<!-- BEGIN - Get the equinox-launcher -->
	<!-- Be careful if your eclipse has more than one equinox launcher -->
	<path id="equinox-launcher-file">
		<fileset dir="${ECLIPSE_HOME}/plugins" casesensitive="no">
			<include name="org.eclipse.equinox.launcher_*.jar" />
		</fileset>
	</path>
	<property name="equinox-launcher" refid="equinox-launcher-file"/>
	<!-- END - Get the equinox-launcher -->
	
	<path id="equinox-launcher-test-file">
        <fileset dir="${ECLIPSE_TEST_TARGET}/plugins">
            <include name="org.eclipse.equinox.launcher_*.jar"/>
        </fileset>
    </path>
	<property name="equinox-launcher-test" refid="equinox-launcher-test-file"/>

	<!-- Load properties from manifest file and plugin.properties file-->
	<property file="${basedir}/META-INF/MANIFEST.MF" prefix="pluginManifest"/>
	<property file="${basedir}/plugin.properties" prefix="pluginProperties"/>

	<property name="jar-file-name" value="ntut.csie.robusta_${pluginManifest.Bundle-Version}.jar"/>
	<property name="jar-file-test-name" value="ntut.csie.test.robusta_${pluginManifest.Bundle-Version}.jar"/>
	<property name="rl-jar-file-name" value="ntut.csie.robusta.agile.exception_1.0.0.jar"/>
	<property name="update-site-url" value="http://pl.csie.ntut.edu.tw/project/Robusta/"/>

	<property name="result-folder" value="${basedir}/result"/>
	<property name="xml-folder" value="${result-folder}/xml"/>
	<property name="release-folder" value="${basedir}/release"/>
	<property name="update-folder" value="${result-folder}/update"/>
	<property name="feature-folder" value="${update-folder}/features"/>
	<property name="plugin-folder" value="${update-folder}/plugins"/>
	<property name="license-folder" value="${update-folder}/licenses"/>
	<property name="update-lib-folder" value="${update-folder}/lib"/>
	<property name="src-folder" value="${basedir}/src"/>
	<property name="test-folder" value="${basedir}/test"/>
	<property name="bin-folder" value="${basedir}/bin"/>
	<property name="lib-folder" value="${basedir}/lib"/>
	<!-- Report -->
	<property name="report-folder" value="${basedir}/report"/>
	<property name="update-id" value="ntut.csie.robusta_${pluginManifest.Bundle-Version}"/>
	<property name="eclipse-public-license" value="epl-v10.html"/>
	<property name="notice" value="notice.html"/>
	<property name="plugin-bundle-name" value="ntut.csie.robusta" />
	<property name="pde-test-data" value="${basedir}/../../junit-workspace" />
	<property name="pde-test-dev" value="file:${basedir}/../.metadata/.plugins/org.eclipse.pde.core/pde-junit/dev.properties" />

	<!-- project lib -->
	<path id="Plug-in Dependencies.libraryclasspath">
		<fileset dir="${ECLIPSE_HOME}/plugins">
			<include name="org.eclipse.ui_*.jar"/>
			<include name="org.eclipse.ui.views_*.jar"/>
			<include name="org.eclipse.ui.editors_*.jar"/>
			<include name="org.eclipse.ui.workbench_*.jar"/>
			<include name="org.eclipse.ui.ide_*.jar"/>
			<include name="org.eclipse.ui.console_*.jar"/>
			<include name="org.eclipse.ui.workbench.texteditor_*.jar"/>
			<include name="org.eclipse.core.commands_*.jar"/>
			<include name="org.eclipse.core.runtime_*.jar"/>
			<include name="org.eclipse.core.jobs_*.jar"/>
			<include name="org.eclipse.core.runtime.compatibility.registry_*/runtime_registry_compatibility.jar"/>
			<include name="org.eclipse.core.contenttype_*.jar"/>
			<include name="org.eclipse.core.filebuffers_*.jar"/>
			<include name="org.eclipse.core.resources_*.jar"/>
			<include name="org.eclipse.swt_*.jar"/>
			<include name="org.eclipse.swt.win32.win32.x86_*.jar"/>
			<include name="org.eclipse.jdt_*.jar"/>
			<include name="org.eclipse.jdt.core_*.jar"/>
			<include name="org.eclipse.jdt.compiler.apt_*.jar"/>
			<include name="org.eclipse.jdt.compiler.tool_*.jar"/>
			<include name="org.eclipse.jdt.junit_*.jar"/>
			<include name="org.eclipse.jdt.junit.core_*.jar"/>
			<include name="org.eclipse.jdt.ui_*.jar"/>
			<include name="org.eclipse.jdt.launching_*.jar"/>
			<include name="org.eclipse.jdt.core.manipulation_*.jar"/>
			<include name="org.eclipse.ltk.core.refactoring_*.jar"/>
			<include name="org.eclipse.ltk.ui.refactoring_*.jar"/>
			<include name="org.eclipse.equinox.common_*.jar"/>
			<include name="org.eclipse.equinox.registry_*.jar"/>
			<include name="org.eclipse.equinox.preferences_*.jar"/>
			<include name="org.eclipse.equinox.app_*.jar"/>
			<include name="org.eclipse.jface.text_*.jar"/>
			<include name="org.eclipse.osgi_*.jar"/>
			<include name="org.eclipse.text_*.jar"/>
			<include name="org.eclipse.jface_*.jar"/>
			<include name="org.junit_4*/junit.jar"/>
			<include name="org.hamcrest.core_*.jar"/>
			<include name="org.apache.ant_*/**/*.jar"/>
		</fileset>
		<pathelement location="lib/commons-lang-2.3.jar"/>
		<pathelement location="lib/slf4j-api-1.5.0.jar"/>
		<pathelement location="lib/slf4j-log4j12-1.5.0.jar"/>
		<pathelement location="lib/log4j-1.2.15.jar"/>
		<pathelement location="lib/jdom.jar"/>
		<pathelement location="lib/jfreechart-1.0.8a.jar"/>
		<pathelement location="lib/jcommon-1.0.12.jar"/>
		<pathelement location="lib/loc_counter.jar"/>
	</path>

	<path id="Robusta.classpath">
		<pathelement location="bin"/>
		<pathelement location="lib/"/>
		<pathelement location="language/"/>
		<path refid="Plug-in Dependencies.libraryclasspath"/>
	</path>

	<!-- OS picker -->
	<condition property="isMac">
		<os family="mac"/>
	</condition>

	<condition property="isWindows">
		<os family="windows"/>
	</condition>

	<condition property="isUnix">
		<os family="unix"/>
	</condition>

	<!-- main target -->
	<!-- run-pde-junit-test, junit-test, junit-report, -->
	<target name="all" depends="init, build-project, product-test-jar, run-pde-junit-test, junit-test, junit-report, 
								agile-jar, product-jar, write-feature-xml, write-site-xml, generate-p2-repository-metadata, zip-product">
		<echo message="Ant build complete"/>
	</target>

	<!-- initialisation -->
	<target name="init">

		<delete quiet="true" dir="${bin-folder}"/>
		<delete quiet="true" dir="${result-folder}"/>
		<delete quiet="true" dir="${basedir}/../../junit-workspace" />
		<mkdir dir="${bin-folder}"/>
		<mkdir dir="${result-folder}"/>
		<mkdir dir="${xml-folder}"/>
		<mkdir dir="${update-folder}"/>
		<mkdir dir="${plugin-folder}"/>
		<mkdir dir="${license-folder}"/>
		<mkdir dir="${update-lib-folder}"/>

		<copy todir="${license-folder}">
			<fileset dir="${release-folder}" includes="*.html"/>
		</copy>
		<copy todir="${update-folder}">
			<fileset dir="${release-folder}" includes="*.txt"/>
		</copy>
		<copy includeemptydirs="false" todir="${bin-folder}">
			<fileset dir="${src-folder}">
				<exclude name="**/*.launch"/>
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="${bin-folder}">
			<fileset dir="${test-folder}">
				<exclude name="**/*.launch"/>
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
		<copy includeemptydirs="false" todir="${bin-folder}/icons">
			<fileset dir="${basedir}/icons"/>
		</copy>
		<copy includeemptydirs="false" todir="${bin-folder}/lib">
			<fileset dir="${lib-folder}"/>
		</copy>
		
    	<copy includeemptydirs="false" todir="${bin-folder}/language">
			<fileset dir="${basedir}/language"/>
		</copy>
		
		<copy includeemptydirs="false" todir="${bin-folder}/META-INF">
			<fileset dir="${basedir}/META-INF"/>
		</copy>
		<!-- REPORT -->
		<copy includeemptydirs="false" todir="${bin-folder}/report">
			<fileset dir="${report-folder}"/>
		</copy>

		<copy file="${basedir}/plugin.properties" tofile="${bin-folder}/plugin.properties"/>
		<!-- 
		Do not copy anymore, modified the plugin.xml to add extension for headless by xmltask instead
		<copy file="${basedir}/plugin.xml" tofile="${bin-folder}/plugin.xml"/>
		-->
		<xmltask source="${basedir}/plugin.xml" dest="${bin-folder}/plugin.xml" encoding="UTF-8">
			<insert path="/plugin">
				<![CDATA[ 
                      <extension id="${plugin-bundle-name}.standalone"
    			         point="org.eclipse.core.runtime.applications">
				<application
    			            cardinality="singleton-global"
    			            thread="main"
    			            visible="true">
					<run class="ntut.csie.rleht.StandAloneApp" />
				</application>
			</extension>
    			]]>
    		</insert>
	</xmltask>
</target>

<!-- compile project -->
<target name="build-project">
	<javac srcdir="${src-folder}:${test-folder}" debug="true" debuglevel="${debuglevel}" destdir="${bin-folder}" source="${source}" target="${target}" includeantruntime="false" encoding="UTF-8">
		<classpath refid="Robusta.classpath"/>
	</javac>
</target>

<!-- wrap bin folder to test jar file -->
<target name="product-test-jar">
	<jar destfile="${plugin-folder}/${jar-file-name}" filesetmanifest="mergewithoutmain" basedir="${bin-folder}"/>
	<copy file="${plugin-folder}/${jar-file-name}" todir="${ECLIPSE_TEST_TARGET}/plugins" overwrite="true" />
</target>

<!-- run pde junit test -->
<target name="run-pde-junit-test">
	<java classname="pde.test.utils.PDETestPortLocator" fork="yes">
		<classpath>
			<path location="${bin-folder}" />
		</classpath>
	</java>
	<waitfor maxwait="10" maxwaitunit="second" checkevery="100" checkeveryunit="millisecond">
		<available file="pde_test_port.properties" />
	</waitfor>
	<property file="pde_test_port.properties" />
	<echo message="Using port ${pde.test.port} for listening to PDE Test run" />
	<parallel>
		<daemons>
			<antcall target="run-pde-test-listener" />
		</daemons>
		<sequential>
			<sleep seconds="1" />
			<antcall target="pde-test"/>
		</sequential>
	</parallel>

	<move todir="${xml-folder}">
		<fileset dir=".">
			<include name="**/TEST-*.xml"/>
		</fileset>
	</move>

	<delete quiet="true" file="pde_test_port.properties"/>
	<delete quiet="true" file="${plugin-folder}/${jar-file-name}"/>
	<delete quiet="true" file="${ECLIPSE_TEST_TARGET}/plugins/${jar-file-name}"/>
</target>

<!-- Test will fail if your host eclipse already install Robusta, check eclipse/artifacts.xml, remove all robusta info there -->
<target name="pde-test">
	<java jar="${equinox-launcher-test}" fork="yes" maxmemory="512m">
		<jvmarg value="-Dfile.encoding=UTF-8" />
		<!-- Do not specify these system constants, let the boot loader select them automatically - avoid OS dependency
		<arg line="-version 3" />
		<arg line="-os win32" />
		<arg line="-ws win32" />
		<arg line="-arch x86_64" /> -->
		<arg line="-port ${pde.test.port}" />
		<arg line="-testpluginname ${plugin-bundle-name}" />
		<arg line="-testLoaderClass org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader" />
		<arg line="-loaderpluginname org.eclipse.jdt.junit4.runtime" />
		<arg line="-classNames ntut.csie.AllTest.AllJUnitPluginTests" />
		<!-- ntut.csie.AllTest.AllJUnitPluginTests -->
		<arg line="-application org.eclipse.pde.junit.runtime.uitestapplication" />
		<arg line="-testlistener org.eclipse.test.XMLTestListener" />
		<arg line="-product org.eclipse.sdk.ide" />
		<arg line="-data ${pde-test-data}" />
		<arg line="-dev ${pde-test-dev}" />
		<arg line="-debug -consoleLog" />
	</java>
</target>

<target name="run-pde-test-listener">
	<java classname="pde.test.utils.PDETestResultsCollector" fork="yes">
		<sysproperty key="DEBUG" value="true" />
		<arg line="ntut.csie.AllTest.AllJUnitPluginTests ${pde.test.port}" />
		<jvmarg value="-Duser=admin -Dpasswd=admin" />
		<classpath refid="Robusta.classpath" />
	</java>
</target>

<!-- run junit test -->
<target name="junit-test">
	<junit printsummary="yes" fork="yes">
		<jvmarg value="-Dfile.encoding=UTF-8" />
		<formatter type="xml"/>
		<batchtest todir="${xml-folder}">
			<fileset dir="${bin-folder}">
				<include name="**/AllJUnitTests.class" />
			</fileset>
		</batchtest>
		<classpath refid="Robusta.classpath" />
	</junit>
</target>

<!-- junit report -->
<target name="junit-report">
	<junitreport todir="${xml-folder}">
		<fileset dir="${xml-folder}">
			<include name="TEST-*.xml"/>
		</fileset>
		<report format="frames" todir="${result-folder}"/>
	</junitreport>
</target>

<!-- wrap Robustness Level files into jar file -->	
<target name="agile-jar">
	<jar destfile="${bin-folder}/lib/${rl-jar-file-name}" filesetmanifest="mergewithoutmain" basedir="${bin-folder}" includes="**/RTag.class, **/Robustness.class, **/SuppressSmell.class">
		<manifest>
			<attribute name="ClassPath" value="."/>
		</manifest>
	</jar>
</target>
	
<!-- wrap bin folder to jar file -->
<target name="product-jar">
	<jar destfile="${plugin-folder}/${jar-file-name}" filesetmanifest="mergewithoutmain" basedir="${bin-folder}" excludes="**/filemaker/, **/*Test.class">
	</jar>
</target>

<!-- write a feature.xml for eclipse update -->
<target name="write-feature-xml">
	<loadresource property="epl-v10">
		<file file="${release-folder}/epl-v10.txt"/>
	</loadresource>
	<mkdir dir="${feature-folder}"/>
	<echoxml file="${feature-folder}/feature.xml">
		<feature
			  id="${plugin-bundle-name}"
			  label="Robusta Exception Handling"
			  version="${pluginManifest.Bundle-Version}">

			<description>
			  A tool for bad smells detection and refactoring.
			</description>

			<copyright>
			  Copyright 2013-2014 - Taipei Tech - Software Systems Lab
			</copyright>

			<license url="http://www.eclipse.org/legal/epl-v10.html">
				${epl-v10}
			</license>
			
			<url>
				<update label="Robusta Update" url="${update-site-url}"/>
			</url>

			<plugin
				 id="${plugin-bundle-name}"
				 download-size="0"
				 install-size="0"
				 version="${pluginManifest.Bundle-Version}"
				 unpack="false"/>

		</feature>
	</echoxml>
	<zip destfile="${feature-folder}/${jar-file-name}" basedir="${feature-folder}"/>
	<delete quiet="true" file="${feature-folder}/feature.xml"/>
</target>

<!-- write a site.xml for eclipse update -->
<target name="write-site-xml">
	<echoxml file="${update-folder}/site.xml">
		<site>
			<feature url="features/${jar-file-name}" id="${plugin-bundle-name}" version="${pluginManifest.Bundle-Version}">
				<category name="Robusta"/>
			</feature>
			<category-def name="Robusta" label="Robusta"/>
		</site>
	</echoxml>
</target>

<!-- Generate metadata for p2 repository for updated site
	Reference: http://wiki.eclipse.org/Equinox/p2/Publisher -->
<target name="generate-p2-repository-metadata">
	<java jar="${equinox-launcher}" fork="true" timeout="10800000" failonerror="true" maxmemory="512m">
		<arg line=" -debug" />
		<arg line=" -console" />
		<arg line=" -consoleLog" />
		<arg line=" -application org.eclipse.equinox.p2.publisher.UpdateSitePublisher" />
		<arg line=" -source ${update-folder}" />
		<arg line=" -configs ANY" />
		<arg line=" -metadataRepository file:${update-folder}/ -metadataRepositoryName 'Robusta Update'" />
		<arg line=" -artifactRepository file:${update-folder}/ -artifactRepositoryName 'Robusta Update'" />
		<arg line=" -publishArtifacts" />
		<!-- Dont want to use compress right now 
			If compressing is specified, content.xml and artifact.xml will be compressed to content.jar and artifact.jar
			This will save bandwidth when publish our tool through web page.
		-->
		<!-- <arg line=" -compress" /> -->
	</java>
	<delete quiet="true" file="${update-folder}/site.xml"/>
</target>

<target name="zip-product">
	<zip destfile="${update-id}.zip" basedir="${update-folder}"/>
</target>
</project>
